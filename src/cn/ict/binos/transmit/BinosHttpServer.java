package cn.ict.binos.transmit;

import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.InetSocketAddress;
import java.net.URI;
import java.net.URL;
import java.net.URLConnection;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.hadoop.fs.Path;
import org.mortbay.jetty.Connector;
import org.mortbay.jetty.Server;
import org.mortbay.jetty.handler.ContextHandlerCollection;
import org.mortbay.jetty.nio.SelectChannelConnector;
import org.mortbay.jetty.servlet.FilterHolder;
import org.mortbay.jetty.servlet.ServletHandler;
import org.mortbay.jetty.servlet.ServletHolder;
import org.mortbay.jetty.webapp.WebAppContext;
import org.mortbay.thread.QueuedThreadPool;

import cn.ict.binos.io.BinosFileInputStream;

/**
 * BinosHttpServer: provide a http server for transmitting intermediate data generated by tasks.
 * @author jiangbing Jun 10, 2011
 *
 */
public class BinosHttpServer {

	private static final Log LOG = LogFactory.getLog(BinosHttpServer.class.getName());
	private static Map<String, String> hostToResolved = new HashMap<String, String>();
	private String path;
	private static String homeDirPath;
	private int httpMaxThreads;
	protected final Server jettyServer;
	protected final Connector listener;
	
	
	/**
	 * Constructor: construct the BinosHttpServer.
	 * path: set the path of server, eg. ip:port
	 */
	public BinosHttpServer(String path) throws Exception{
		this(path, -1);
	}
	
	/**
	 * Constructor: construct the BinosHttpServer
	 * @param path: 
	 * @param maxThreads : the number of threads concurrent used.
	 * @throws Exception
	 */
	public BinosHttpServer(String path, int maxThreads) throws Exception  {
		this.path = path;//set the path in the configuration later
		this.httpMaxThreads = maxThreads;//set the number of threads in the configuration later.
		homeDirPath = "/tmp/";//set the args in the configuration later
		InetSocketAddress infoSocAddr = createSocketAddr(this.path, -1);
		String httpBindAddress = infoSocAddr.getHostName();
		int httpPort = infoSocAddr.getPort();
		this.jettyServer = new Server();
		this.listener = createBaseListener();
		this.listener.setHost(httpBindAddress);
		this.listener.setPort(httpPort);
		this.jettyServer.addConnector(listener);
		QueuedThreadPool threadPool = maxThreads == -1 ?
			        new QueuedThreadPool() : new QueuedThreadPool(this.httpMaxThreads);
		this.jettyServer.setThreadPool(threadPool);
		ServletHandler servletHandler = new ServletHandler(); 
		this.jettyServer.setHandler(servletHandler);
		servletHandler.addServletWithMapping("cn.ict.binos.transmit.BinosHttpServer$OutputServlet", "/output");
		
	}
	
	public void start() {
		try {
			this.jettyServer.start();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	/**
	 * method to build socket addr from either: <host> <host>:<post>
	 * <fs>://<host>:<port>/<path>
	 */
	private static InetSocketAddress createSocketAddr(String target,
			int defaultPort) {
		if (target == null) {
			throw new IllegalArgumentException("Target address cannot be null.");
		}
		int colonIndex = target.indexOf(':');
		if (colonIndex < 0 && defaultPort == -1) {
			throw new RuntimeException("Not a host:port pair: " + target);
		}
		String hostname;
		int port = -1;
		if (!target.contains("/")) {
			if (colonIndex == -1) {
				hostname = target;
			} else {
				// must be the old style <host>:<port>
				hostname = target.substring(0, colonIndex);
				port = Integer.parseInt(target.substring(colonIndex + 1));
			}
		} else {
			// a new uri
			URI addr = new Path(target).toUri();
			hostname = addr.getHost();
			port = addr.getPort();
		}

		if (port == -1) {
			port = defaultPort;
		}
		return new InetSocketAddress(hostname, port);
	}
	  /**
	   * Create a required listener for the Jetty instance listening on the port
	   * provided. This wrapper and all subclasses must create at least one
	   * listener.
	   */
	  protected Connector createBaseListener()
	      throws IOException {
	    SelectChannelConnector ret = new SelectChannelConnector();
	    ret.setLowResourceMaxIdleTime(10000);
	    ret.setAcceptQueueSize(128);
	    ret.setResolveNames(false);
	    ret.setUseDirectBuffers(false);
	    return ret;
	  }
	  
	  /**
	   * set the home directory.
	   * @param dirPath
	   * @throws FileNotFoundException 
	   */
	  public static void setHomeDirectory(String dirPath) throws FileNotFoundException {
		  File homeDir = new File(dirPath);
		  if (homeDir.exists() && homeDir.isDirectory()) {
			  homeDirPath = dirPath;
			  if (!homeDirPath.endsWith("/"))
				  homeDirPath += "/";  
		  } else {
			  throw new FileNotFoundException(homeDirPath + " doesnot exist!");
		  }
	  }
	  public static String getHomeDirectory() {
		  return homeDirPath;
	  }
	  /**
	   * Add an internal servlet in the server. 
	   * Note: This method is to be used for adding servlets that facilitate
	   * internal communication and not for user facing functionality. For
	   * servlets added using this method, filters are not enabled. 
	   * 
	   * @param name The name of the servlet (can be passed as null)
	   * @param pathSpec The path spec for the servlet
	   * @param clazz The servlet class
	   */
	  public void addInternalServlet(String name, String pathSpec,
	      Class<? extends HttpServlet> clazz) {
	    ServletHolder holder = new ServletHolder(clazz);
	    if (name != null) {
	      holder.setName(name);
	    }
	    //webAppContext.addServlet(holder, pathSpec);
	  }

	/**
	 * This class is used in BinosHttpServer Jetty to serve the task outputs to
	 * other nodes.
	 */
	public static class OutputServlet extends HttpServlet {
		private static final long serialVersionUID = 1L;
		private static final int MAX_BYTES_TO_READ = 64 * 1024;

		@Override
		public void doGet(HttpServletRequest request,
				HttpServletResponse response) throws ServletException,
				IOException {
			String jobId = (String) request.getParameter("job");
			String taskId = (String) request.getParameter("task");
			String pathId = (String) request.getParameter("id");
			if (jobId == null) {
				throw new IOException("job parameter is required");
			}
			if (taskId == null) {
				throw new IOException("task parameter is required");
			}
			if (pathId == null) {
				throw new IOException("file path id parameter is required");
			}
			String outputPath = homeDirPath + jobId + "/" + taskId + "/"
					+ pathId;
			response.setContentType("text/html");
			response.setStatus(HttpServletResponse.SC_OK);
//			response.getWriter().println(
//					"jobId:" + jobId + " taskId:" + taskId + " id:" + pathId
//							+ "\n");
			DataOutputStream outStream = new DataOutputStream(
					response.getOutputStream());
			response.setBufferSize(MAX_BYTES_TO_READ);
			transmitFile(outStream, outputPath);
			outStream.close();
		}

		/**
		 * copy the file in the httpserver to local FS.
		 * 
		 * @param path
		 * @param outStream
		 * @throws IOException
		 */
		private void transmitFile(DataOutputStream outStream, String localPath)
				throws IOException {

			LOG.info("fetch the file+" + localPath + " from remote server.");
			byte[] buffer = new byte[MAX_BYTES_TO_READ];
			long totalRead = 0;
			File file = new File(localPath);
			if (!file.exists()) {
				throw new FileNotFoundException(localPath + " doesnot exist.");
			}
			BinosFileInputStream bfis = new BinosFileInputStream(file);
			int len = bfis.read(buffer, 0, MAX_BYTES_TO_READ);
			while (len >= 0) {
				if (len > 0) {
					outStream.write(buffer, 0, len);
					totalRead += len;
				} else {
					LOG.info("Skipped zero-length read of " + localPath);
				}
				len = bfis.read(buffer, 0, MAX_BYTES_TO_READ);
			}
			try {
				outStream.flush();
			} catch (IOException ie) {
				throw ie;
			} finally {
				bfis.close();
			}
		}
	}
	  //just for test
	  public static void main(String[] args) throws Exception {
		  BinosHttpServer httpServer = new BinosHttpServer("0.0.0.0:36661", -1);
		  httpServer.start();
		  URL url = new URL("http://127.0.0.1:36661/output?job=0&task=1_1_1&id=1");
		  HttpURLConnection connection = (HttpURLConnection) url.openConnection();
		  connection.connect();
		  
		  BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
		  //connection.getOutputStream();
		  String tmp = null;
		  while ((tmp = br.readLine()) != null) {
			  System.out.println(tmp);
			  
		  }
		  
//		  DataInputStream input = new DataInputStream(connection.getInputStream());
		  
	  }
	  
}
